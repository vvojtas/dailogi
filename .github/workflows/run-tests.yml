name: Run Tests

on:
  workflow_call:
    inputs:
      artifact_retention_days:
        description: 'Number of days to retain artifacts'
        required: false
        type: number
        default: 7
    secrets:
      JWT_SECRET:
        description: 'Secret for JWT signing'
        required: true
    outputs:
      backend_coverage:
        description: 'Backend test coverage percentage'
        value: ${{ jobs.backend-tests.outputs.coverage }}
      frontend_coverage:
        description: 'Frontend test coverage percentage'
        value: ${{ jobs.frontend-tests.outputs.coverage }}

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-frontend
      
      - name: Lint frontend code
        working-directory: ./ui
        run: npm run lint

  backend-tests:
    name: Backend Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.jacoco-coverage.outputs.coverage }}
    defaults:
      run:
        working-directory: ./be/dailogi-server
    
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-backend
      
      - name: Build and test with Maven
        run: mvn -B test

      - name: Generate JaCoCo Coverage Report
        run: mvn jacoco:report
        
      - name: Extract JaCoCo coverage percentage
        id: jacoco-coverage
        run: |
          COVERAGE_FILE="target/site/jacoco/index.html"
          if [ -f "$COVERAGE_FILE" ]; then
            TOTAL_COVERAGE=$(grep -o 'Total[^%]*%' "$COVERAGE_FILE" | grep -o '[0-9]*%' | head -1)
            echo "coverage=$TOTAL_COVERAGE" >> $GITHUB_OUTPUT
            echo "Backend test coverage: $TOTAL_COVERAGE"
          else
            echo "coverage=N/A" >> $GITHUB_OUTPUT
            echo "Coverage file not found"
          fi

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: be/dailogi-server/target/site/jacoco/
          retention-days: ${{ inputs.artifact_retention_days }}

  frontend-tests:
    name: Frontend Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.vitest-coverage.outputs.coverage }}
    defaults:
      run:
        working-directory: ./ui
    
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-frontend
      
      - name: Run Vitest unit tests with coverage
        run: npm run test:coverage
      
      - name: Extract Vitest coverage percentage
        id: vitest-coverage
        run: |
          COVERAGE_FILE="coverage/index.html"
          if [ -f "$COVERAGE_FILE" ]; then
            TOTAL_COVERAGE=$(grep -A 1 'class="strong"' "$COVERAGE_FILE" | head -1 | grep -o '[0-9\.]*%' | head -1)
            echo "coverage=$TOTAL_COVERAGE" >> $GITHUB_OUTPUT
            echo "Frontend test coverage: $TOTAL_COVERAGE"
          else
            echo "coverage=N/A" >> $GITHUB_OUTPUT
            echo "Coverage file not found"
          fi
      
      - name: Upload Vitest coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: ui/coverage/
          retention-days: ${{ inputs.artifact_retention_days }}

  e2e-tests:
    name: E2E Tests
    needs: lint
    runs-on: ubuntu-latest
    environment: ci-test
    env:
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
    
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-backend
      
      - name: Build backend with Maven
        working-directory: ./be/dailogi-server
        run: mvn clean package -DskipTests

      - name: Start backend server and wait for it to be ready
        working-directory: ./be/dailogi-server
        run: |
          # Clean previous log
          rm -f backend_startup.log
          
          # Start backend server
          echo "Starting backend server in background..."
          mvn spring-boot:run -Dspring-boot.run.profiles=local,e2e-test > backend_startup.log 2>&1 &
          
          # Wait for backend to initialize
          echo "Waiting for backend to initialize..."
          MAX_ATTEMPTS=12
          SLEEP_INTERVAL=10
          attempt=0
          until curl --silent --fail http://localhost:8080/actuator/health > /dev/null 2>&1; do
            attempt=$((attempt + 1))
            if [ "$attempt" -ge "$MAX_ATTEMPTS" ]; then
              echo "Backend did not start after ${MAX_ATTEMPTS} attempts"
              exit 1
            fi
            echo "Backend not yet ready (attempt ${attempt}/${MAX_ATTEMPTS}). Waiting ${SLEEP_INTERVAL}s..."
            if [ "$attempt" -gt "1" ]; then
              tail -n 50 backend_startup.log || echo "Could not tail log"
            fi
            sleep $SLEEP_INTERVAL
          done
          echo "Backend is up and running"

      - name: Display backend logs on failure
        if: failure()
        working-directory: ./be/dailogi-server
        run: cat backend_startup.log || echo "Log file not found"

      # Setup frontend and run tests
      - uses: ./.github/actions/setup-frontend
      
      - name: Install Playwright browsers
        working-directory: ./ui
        run: npx playwright install --with-deps chromium
      
      - name: Run Playwright E2E tests
        working-directory: ./ui
        run: npm run test:e2e
        env:
          SPRING_BACKEND_BASE_URL: ${{vars.SPRING_BACKEND_BASE_URL}}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-report
          path: ui/playwright-report/
          retention-days: ${{ inputs.artifact_retention_days }} 