name: Pull Request Checks

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Setup and lint frontend
      - uses: ./.github/actions/setup-frontend
      
      - name: Lint frontend code
        working-directory: ./ui
        run: npm run lint

  backend-tests:
    name: Backend Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./be/dailogi-server
    
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-backend
      
      - name: Build and test with Maven
        run: mvn -B test

      - name: Generate JaCoCo Coverage Report
        run: mvn jacoco:report

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: be/dailogi-server/target/site/jacoco/
          retention-days: 30

  frontend-tests:
    name: Frontend Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ui
    
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-frontend
      
      - name: Run Vitest unit tests with coverage
        run: npm run test:coverage
      
      - name: Upload Vitest coverage report
        uses: actions/upload-artifact@v4
        with:
          name: vitest-coverage
          path: ui/coverage/
          retention-days: 30

  e2e-tests:
    name: E2E Tests
    needs: lint
    runs-on: ubuntu-latest
    environment: ci-test
    
    steps:
      - uses: actions/checkout@v4
      
      # Setup backend and start server
      - uses: ./.github/actions/setup-backend
      
      - name: Start backend server
        working-directory: ./be/dailogi-server
        run: mvn spring-boot:run -Dspring-boot.run.profiles=local,e2e-test &
        env:
          SSL_KEY_STORE_PASSWORD: ${{ secrets.SSL_KEY_STORE_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
      
      - name: Wait for backend to start
        run: |
          echo "Waiting for backend to initialize..."
          sleep 30s
          echo "Backend should be running now"
      
      # Setup frontend and run tests
      - uses: ./.github/actions/setup-frontend
      
      - name: Install Playwright browsers
        working-directory: ./ui
        run: npx playwright install --with-deps chromium
      
      - name: Run Playwright E2E tests
        working-directory: ./ui
        run: npm run test:e2e
        env:
          SPRING_BACKEND_BASE_URL: ${{vars.SPRING_BACKEND_BASE_URL}}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ui/playwright-report/
          retention-days: 30

  status-comment:
    name: PR Status Comment
    needs: [backend-tests, frontend-tests, e2e-tests]
    runs-on: ubuntu-latest
    if: ${{ always() && github.event_name == 'pull_request' }}
    
    steps:
      - name: Check previous job status
        id: check_status
        run: |
          if [[ "${{ needs.backend-tests.result }}" == "success" && "${{ needs.frontend-tests.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Create or update comment
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = "${{ steps.check_status.outputs.status }}";
            const emoji = status === "success" ? "✅" : "❌";
            const color = status === "success" ? "brightgreen" : "red";
            const title = status === "success" ? "All checks passed!" : "Checks failed!";
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## PR Check Status')
            );
            
            const body = `## PR Check Status: ${emoji} ${title}
            
            | Check | Status |
            | ----- | ------ |
            | Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |
            | Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |
            | E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |
            
            [View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            } 