---
description: 
globs: *.tsx
alwaysApply: false
---
### Guidelines for React

- Use functional components with hooks instead of class components
- Never use "use client" and other Next.js directives as we use React with Astro
- Extract logic into custom hooks in `src/components/hooks`
- Implement React.memo() for expensive components that render often with the same props
- Utilize React.lazy() and Suspense for code-splitting and performance optimization
- Use the useCallback hook for event handlers passed to child components to prevent unnecessary re-renders
- Prefer useMemo for expensive calculations to avoid recomputation on every render
- Implement useId() for generating unique IDs for accessibility attributes
- Consider using the new useOptimistic hook for optimistic UI updates in forms
- Use useTransition for non-urgent state updates to keep the UI responsive

### Hydration Pattern for Forms

- For forms and interactive components, implement a hydration state pattern to prevent interaction before hydration completes:
```tsx
const [hydrated, setHydrated] = useState(false);

useEffect(() => {
  setHydrated(true);
}, []);

// Disable form elements until hydration completes
<Input disabled={isLoading || !hydrated} />
<Button disabled={isLoading || !hydrated}>Submit</Button>
```
- In e2e tests, wait for elements to be enabled rather than using arbitrary timeouts:
```typescript
// Wait for hydration to complete
await expect(page.getByTestId("submit-button")).toBeEnabled();
```
- This pattern ensures components work correctly during SSR/hydration and provides reliable test automation