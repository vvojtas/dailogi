---
description: 
globs: 
alwaysApply: true
---
# AI Rules for d-AI-logi

d-AI-logi is an interactive web application that lets users create and observe dialogues between various AI personas. Users can choose predefined characters or design their own, and then set up a scene with 2â€“3 characters by defining a conversation topic.

## Tech Stack

- Astro 5
- TypeScript 5
- React 19
- Tailwind 4
- Shadcn/ui
- Java 21
- Spring

## Project Structure

When introducing changes to the project, always follow the directory structure below:

- `./ui/src` - ui source code
- `./ui/src/layouts` - Astro layouts
- `./ui/src/pages` - Astro pages
- `./ui/src/pages/api` - API endpoints
- `./ui/src/middleware/index.ts` - Astro middleware
- `./ui/src/db` - Supabase clients and types
- `./ui/src/types.ts` - Shared types derived from backend (Entities, DTOs)
- `./ui/src/components` - Client-side components written in Astro (static) and React (dynamic)
- `./ui/src/components/ui` - Client-side components from Shadcn/ui
- `./ui/src/lib` - Services and helpers 
- `./ui/src/assets` - static internal assets
- `./be/dailogi-server/src` - backend source code for server
- `./be/dailogi-server/src/main/java/com/github/vvojtas/dailogi_server` - root javapackage
- `./be/dailogi-server/src/main/java/com/github/vvojtas/dailogi_server/controller` - backend REST controllers
- `./be/dailogi-server/src/main/java/com/github/vvojtas/dailogi_server/service` - backend services
- `./be/dailogi-server/src/main/java/com/github/vvojtas/dailogi_server/model` - backend DTOs
- `./be/dailogi-server/src/main/java/com/github/vvojtas/dailogi_server/db/entity` - database models
- `./be/dailogi-server/src/main/java/com/github/vvojtas/dailogi_server/db/repository` - database repositories
- `./be/dailogi-server/src/main/java/com/github/vvojtas/dailogi_server/config` - backend spring configuration classes
- `./be/dailogi-server/src/main/java/com/github/vvojtas/dailogi_server/properties` - localisation for ConfigurationProperties
- `./public` - public assets

When modifying the directory structure, always update this section.

## Coding practices

### Guidelines for clean code

- Use feedback from linters to improve the code when making changes.
- Prioritize error handling and edge cases.
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.
