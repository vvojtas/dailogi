/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * d-AI-logi API
 * API for d-AI-logi - an interactive web application for creating AI dialogues
 * OpenAPI spec version: v1.0.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  CharacterDTO,
  CharacterListDTO,
  CreateCharacterCommand,
  GetCharactersParams,
  UpdateCharacterCommand,
} from ".././model";

/**
 * Retrieves a single character by its ID.
If the user is authenticated, the character must either be owned by the current user or be a global character.
If the user is not authenticated, only global characters can be retrieved.
Authentication is optional.

 * @summary Get character by ID
 */
export const getCharacter = <TData = AxiosResponse<CharacterDTO>>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/api/characters/${id}`, options);
};
/**
 * Updates an existing character with new data.
The character must be owned by the current user.
The character name must remain unique for the user.
Requires authentication.

 * @summary Update an existing character
 */
export const updateCharacter = <TData = AxiosResponse<CharacterDTO>>(
  id: number,
  updateCharacterCommand: UpdateCharacterCommand,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(`/api/characters/${id}`, updateCharacterCommand, options);
};
/**
 * Deletes a character owned by the current user.
The character must not be used in any dialogues.
Requires authentication.

 * @summary Delete a character
 */
export const deleteCharacter = <TData = AxiosResponse<string>>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`/api/characters/${id}`, options);
};
/**
 * Retrieves a paginated list of characters.
If the user is authenticated, the list includes the user's personal characters and optionally global characters.
If the user is not authenticated, only global characters are returned (if `includeGlobal` is true).
Results are sorted with personal characters first (if applicable), then global characters, both groups sorted by name.
Authentication is optional.

 * @summary Get paginated list of characters
 */
export const getCharacters = <TData = AxiosResponse<CharacterListDTO>>(
  params?: GetCharactersParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/api/characters`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};
/**
 * Creates a new character for the current user.
The character name must be unique for the user.
Optionally can include base64-encoded avatar data during character creation.
Supports PNG and JPEG avatar formats up to 1MB and max 256x256 pixels.
Requires authentication.

 * @summary Create a new character
 */
export const createCharacter = <TData = AxiosResponse<CharacterDTO>>(
  createCharacterCommand: CreateCharacterCommand,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`/api/characters`, createCharacterCommand, options);
};
export type GetCharacterResult = AxiosResponse<CharacterDTO>;
export type UpdateCharacterResult = AxiosResponse<CharacterDTO>;
export type DeleteCharacterResult = AxiosResponse<string>;
export type GetCharactersResult = AxiosResponse<CharacterListDTO>;
export type CreateCharacterResult = AxiosResponse<CharacterDTO>;
